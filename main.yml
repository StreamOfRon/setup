- hosts: all
  gather_facts: true

  vars_files:
    - default.config.yml

  pre_tasks:
    - name: Check old options
      ansible.builtin.stat:
        path: "{{ lookup('env', 'HOME') }}/.ansible-config"
      register: old_conf

    - name: Move old options file to new name
      block:
        - name: Copy to new name
          ansible.builtin.copy:
            src: "{{ lookup('env', 'HOME') }}/.ansible-config"
            dest: "{{ lookup('env', 'HOME') }}/.setup-options"
        - name: Remove old file
          ansible.builtin.file:
            path: "{{ lookup('env', 'HOME') }}/.ansible-config"
            state: absent
      when: old_conf.stat.exists

    - name: Create local config
      ansible.builtin.copy:
        src: "{{ lookup('env', 'HOME') }}/.setup/default.config.yml"
        dest: "{{ lookup('env', 'HOME') }}/.setup-options"
        force: false

    - name: Include local configuration
      include_vars: "{{ item }}"
      loop:
        - "{{ lookup('env', 'HOME') }}/.setup-options"

    - name: Update package managers
      block:
        - name: Update homewbrew packages
          community.general.homebrew:
            update_homebrew: true
          when: ansible_pkg_mgr == "homebrew"
        - name: Update apt packages
          ansible.builtin.apt:
            update_cache: true
          when: ansible_pkg_mgr == "apt"
        - name: Update pacman packages
          community.general.pacman:
            update_cache: true
          when: ansible_pkg_mgr == "pacman"
    - name: Get list of installed packages
      block:
        - name: Get installed homebew packages
          import_tasks: tasks/homebrew_list.yml
          when: ansible_pkg_mgr == "homebrew"

  tasks:
    - import_tasks: tasks/ansible-pull-cron.yml
      when: setup_ansible_pull
    - import_tasks: tasks/oh-my-zsh.yml
      when: oh_my_zsh
    - import_tasks: tasks/dotfiles.yml
      when: dotfiles
    - import_tasks: tasks/vscode.yml
      when: vscode
    - import_tasks: tasks/mac-app-store.yml
      when: mac_app_store
    - name: Manage sync tools
      import_tasks: tasks/homebrew_packages.yml
      vars:
        name: sync
        install_formulae: "{{ sync_formulae }}"
        install_casks: "{{ sync_casks }}"
        remove_formulae: []
        remove_casks: []
      when: install_sync_tools and ansible_pkg_mgr == "homebrew"
      ignore_errors: true
    - name: Manage misc apps
      import_tasks: tasks/homebrew_packages.yml
      vars:
        name: misc
        install_formulae: "{{ misc_formulae }}"
        install_casks: "{{ misc_casks }}"
        remove_formulae: []
        remove_casks: []
      when: install_misc_apps and ansible_pkg_mgr == "homebrew"
      ignore_errors: true
    - name: Manage entertainment apps
      import_tasks: tasks/homebrew_packages.yml
      vars:
        name: entertainment
        install_formulae: "{{ entertainment_formulae }}"
        install_casks: "{{ entertainment_casks }}"
        remove_formulae: []
        remove_casks: []
      when: install_entertainment_apps and ansible_pkg_mgr == "homebrew"
      ignore_errors: true
    - name: Manage media tools
      import_tasks: tasks/homebrew_packages.yml
      vars:
        name: media
        install_formulae: "{{ media_formulae }}"
        install_casks: "{{ media_casks }}"
        remove_formulae: []
        remove_casks: []
      when: install_media_tools and ansible_pkg_mgr == "homebrew"
      ignore_errors: true
    - name: Manage kube tools
      import_tasks: tasks/homebrew_packages.yml
      vars:
        name: kube
        install_formulae: "{{ kube_formulae }}"
        install_casks: "{{ kube_casks }}"
        remove_formulae: []
        remove_casks: []
      when: install_kube_apps and ansible_pkg_mgr == "homebrew"
      ignore_errors: true
    - name: Manage dev tools
      import_tasks: tasks/homebrew_packages.yml
      vars:
        name: dev
        install_formulae: "{{ devtools_formulae }}"
        install_casks: "{{ devtools_casks }}"
        remove_formulae: []
        remove_casks: []
      when: install_dev_tools and ansible_pkg_mgr == "homebrew"
      ignore_errors: true
    - name: Manage common cli tools
      import_tasks: tasks/homebrew_packages.yml
      vars:
        name: common cli
        install_formulae: "{{ common_cli_formulae }}"
        install_casks: "{{ common_cli_casks }}"
        remove_formulae: []
        remove_casks: []
      when: install_common_cli_tools and ansible_pkg_mgr == "homebrew"
      ignore_errors: true
    - name: Manage aws tools
      import_tasks: tasks/homebrew_packages.yml
      vars:
        name: aws
        install_formulae: "{{ aws_formulae }}"
        install_casks: "{{ aws_casks }}"
        remove_formulae: []
        remove_casks: []
      when: install_aws_tools and ansible_pkg_mgr == "homebrew"
      ignore_errors: true
    - name: Manage other packages
      import_tasks: tasks/homebrew_packages.yml
      vars:
        name: other
        install_formulae: "{{ install_other_formulae }}"
        install_casks: "{{ install_other_casks }}"
        remove_formulae: "{{ remove_other_formulae }}"
        remove_casks: "{{ remove_other_casks }}"
      when: ansible_pkg_mgr == "homebrew"
      ignore_errors: true
    - name: Install python packages
      ansible.builtin.pip:
        name: "{{ install_pip_packages }}"
        state: present
      when: install_pip_packages
      ignore_errors: true